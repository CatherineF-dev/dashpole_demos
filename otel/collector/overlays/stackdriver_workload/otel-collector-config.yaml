receivers:
  prometheus/self:
    config:
      scrape_configs:
      - job_name: 'otel-collector'
        scrape_interval: 60s
        metric_relabel_configs:
        - regex: service_instance_id
          action: labeldrop
        static_configs:
        - targets: ['0.0.0.0:8888']
  prometheus:
    config:
      global:
        scrape_interval: 10s
      scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          regex: "true"
          action: keep
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $$1:$$2
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: mysql_global_status_commands_total
          action: keep
processors:
  resource/self:
    attributes:
    - key: opencensus.resourcetype
      value: container
      action: upsert
    - key: cloud.zone
      value: us-central1-c
      action: upsert
    - key: k8s.cluster.name
      value: cluster-500
      action: upsert
    - key: k8s.pod.name
      value: "$POD_NAME"
      action: upsert
    - key: k8s.namespace.name
      value: "$POD_NAMESPACE"
      action: upsert
    - key: container.name
      value: collector
      action: upsert
  # metrics_export/self:
  #   allowed_labels:
  #   - opencensus.resourcetype
  #   - cloud.zone
  #   - k8s.cluster.name
  #   - k8s.pod.name
  #   - k8s.namespace.name
  #   - container.name
  #   export_map:
  #     "otelcol_exporter_sent_metric_points":
  #       allowed_labels: ["exporter"]
  #       export_as_int: true
  #       export_name: "kubernetes.io/internal/addons/workload_metrics/otelcol/exporter/sent_metric_points"
  #     "otelcol_exporter_send_failed_metric_points":
  #       allowed_labels: ["exporter"]
  #       export_as_int: true
  #       export_name: "kubernetes.io/internal/addons/workload_metrics/otelcol/exporter/send_failed_metric_points"
  #     "otelcol_receiver_accepted_metric_points":
  #       allowed_labels: ["receiver", "transport"]
  #       export_as_int: true
  #       export_name: "kubernetes.io/internal/addons/workload_metrics/otelcol/receiver/accepted_metric_points"
  #     "otelcol_receiver_refused_metric_points":
  #       allowed_labels: ["receiver", "transport"]
  #       export_as_int: true
  #       export_name: "kubernetes.io/internal/addons/workload_metrics/otelcol/receiver/refused_metric_points"

exporters:
  logging:
    logLevel: debug
  googlecloud:
    timeout: 15s
    metric:
      prefix: workload.googleapis.com/
    retry_on_failure:
      enabled: false
    sending_queue:
      enabled: false
  
service:
  pipelines:
    metrics:
      receivers: [prometheus]
      exporters: [googlecloud]
      # exporters: [googlecloud, logging]
    # metrics/self:
    #   receivers: [prometheus/self]
    #   processors: [resource/self, metrics_export/self]
    #   exporters: [googlecloud]